import typing

from src.tools import generic
from src.widex.common.dtypes import Array, Const, Wide

from .types import ProcedureType
from .utils import opcode_from_sig


@opcode_from_sig
def add(left: Wide | Const[int], right: Wide | Const[int], target: Wide) -> None: ...
@opcode_from_sig
def sub(left: Wide | Const[int], right: Wide | Const[int], target: Wide) -> None: ...
@opcode_from_sig
def mul(left: Wide | Const[int], right: Wide | Const[int], target: Wide) -> None: ...
@opcode_from_sig
def lshift(left: Wide | Const[int], right: Wide | Const[int], target: Wide) -> None: ...
@opcode_from_sig
def rshift(left: Wide | Const[int], right: Wide | Const[int], target: Wide) -> None: ...
@opcode_from_sig
def div(left: Wide | Const[int], right: Wide | Const[int], target: Wide) -> None: ...
@opcode_from_sig
def mod(left: Wide | Const[int], right: Wide | Const[int], target: Wide) -> None: ...
@opcode_from_sig
def divmod(left: Wide | Const[int], right: Wide | Const[int], quot: Wide, rem: Wide) -> None: ...


@opcode_from_sig
def and_(left: Wide | Const[int], right: Wide | Const[int], target: Wide) -> None: ...
@opcode_from_sig
def or_(left: Wide | Const[int], right: Wide | Const[int], target: Wide) -> None: ...
@opcode_from_sig
def not_(left: Wide | Const[int], target: Wide) -> None: ...
@opcode_from_sig
def xor(left: Wide | Const[int], right: Wide | Const[int], target: Wide) -> None: ...


@opcode_from_sig
def arr_move(idx: Wide | Const[int], array: Array, rel: Wide | Const[int]) -> None: ...
@opcode_from_sig
def arr_store(idx: Wide | Const[int], array: Array, value: Wide | Const[int]) -> None: ...
@opcode_from_sig
def arr_load(idx: Wide | Const[int], array: Array | Const[typing.Sequence[int]], target: Wide) -> None: ...


@opcode_from_sig
def callz(value: Wide, if_: ProcedureType, else_: ProcedureType) -> None: ...
@opcode_from_sig
def calleq(left: Wide, right: Wide | Const[int], if_: ProcedureType, else_: ProcedureType) -> None: ...
@opcode_from_sig
def callneq(left: Wide, right: Wide | Const[int], if_: ProcedureType, else_: ProcedureType) -> None: ...
@opcode_from_sig
def callge(left: Wide, right: Wide | Const[int], if_: ProcedureType, else_: ProcedureType) -> None: ...
@opcode_from_sig
def callgt(left: Wide, right: Wide | Const[int], if_: ProcedureType, else_: ProcedureType) -> None: ...
@opcode_from_sig
def callle(left: Wide, right: Wide | Const[int], if_: ProcedureType, else_: ProcedureType) -> None: ...
@opcode_from_sig
def calllt(left: Wide, right: Wide | Const[int], if_: ProcedureType, else_: ProcedureType) -> None: ...
@opcode_from_sig
def switch(value: Wide, cases: dict[Wide | Const[int], ProcedureType], else_: ProcedureType) -> None: ...


@opcode_from_sig
def assign(value: Wide | Const[int], target: Wide) -> None: ...
@opcode_from_sig
def copy(value: Wide, target: Wide) -> None: ...
@opcode_from_sig
def move(value: Wide, target: tuple[tuple[Wide, int], ...]) -> None: ...


@opcode_from_sig
def input(target: Wide) -> None: ...
@opcode_from_sig
def output(*args: Wide | Const[generic.PrintableType]) -> None: ...


@opcode_from_sig
def alloc(value: Wide | Array) -> None: ...
@opcode_from_sig
def free(value: Wide | Array) -> None: ...
